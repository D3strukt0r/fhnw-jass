name: CI/CD

env:
  IMAGE_NAME: fhnw-jass-server

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "*"

  # Run tests for any PRs.
  pull_request:

  workflow_dispatch:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8 # The JDK version to make available on the path.
          java-package: jdk+fx # (jre, jdk, or jdk+fx) - defaults to jdk

      - name: Cache local Gradle repository
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Assemble the library
        run: ./gradlew :lib:assemble

      - name: Assemble the server
        run: ./gradlew :server:assemble

      - name: Assemble the client
        run: ./gradlew :client:assemble

      - name: Test the library
        run: ./gradlew :lib:check

      - name: Test the server
        run: ./gradlew :server:check

      - name: Test the client
        run: ./gradlew :client:check

      - name: Run test build
        run: |
          echo "SPIGOT_VERSION=$SPIGOT_VERSION"
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup Travis DPL
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby
          sudo gem install dpl --pre

      - name: Cache local Gradle repository
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set variables
        run: |
          IMAGE_ID=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//') && echo "::set-env name=VERSIONED::$VERSION"

          # Figure out correct version name
          if [ "$VERSION" == "master" ]; then
              VERSION=latest
          elif [ "$VERSION" == "develop" ]; then
              VERSION=nightly
          fi

          echo "IMAGE_ID=$IMAGE_ID"
          echo "::set-env name=IMAGE_ID::$IMAGE_ID"
          echo "VERSION=$VERSION"
          echo "::set-env name=VERSION::$VERSION"

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image to Docker Hub
        run: |
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      # https://github.com/travis-ci/dpl#github-releases
      - name: Deploy to Github Releases
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          dpl releases \
              --token ${{ secrets.PAT }} \
              --repo ${{ github.repository }} \
              --file client/build/libs/*,client/build/distributions/*,server/build/libs/*,server/build/distributions/* \
              --file_glob \
              --tag_name $VERSION
