plugins {
    id('application')
}

dependencies {
    implementation(project(':lib'))

    // Material UI Theme
    implementation(group: 'com.jfoenix', name: 'jfoenix', version: '8.0.9')

    // Use Material icons in the UI
    implementation(group: 'com.github.jiconfont', name: 'jiconfont-javafx', version: '1.0.0')
    implementation(group: 'com.github.jiconfont', name: 'jiconfont-google_material_design_icons', version: '2.2.0.2')

    // Use SQLite and ORM for storage
    implementation(group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0')
    implementation(group: 'com.j256.ormlite', name: 'ormlite-core', version: '5.1')
    implementation(group: 'com.j256.ormlite', name: 'ormlite-jdbc', version: '5.1')

    // Use JSON for messaging
    implementation(group: 'org.json', name: 'json', version: '20200518')

    // Needed to pass arguments
    implementation(group: 'commons-cli', name: 'commons-cli', version: '1.4')

    // For logging
    implementation(group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1')
    implementation(group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1')
    implementation(group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.1')

    // For testing
    testImplementation(group: 'junit', name: 'junit', version: '4.12')
}

// When running :client:run, where should it start?
application {
    mainClassName = 'jass.client.Main'
}

// When running :client:run, these arguments are included
run {
    args('--verbose')
}

distZip {
    archiveFileName = "jass.zip"
}

distTar {
    archiveFileName = "jass.tgz"
    compression = Compression.GZIP
}

jar {
    // So that Docker can easily find the file
    archiveFileName = "jass.jar"

    // Every .jar needs a manifest file
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version, 'Main-Class': mainClassName)
    }

    // Makes sure the :lib project is included
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
